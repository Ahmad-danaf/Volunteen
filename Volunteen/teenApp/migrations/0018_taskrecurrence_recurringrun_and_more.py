# Generated by Django 5.0.1 on 2025-10-10 15:14

import datetime
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('teenApp', '0017_personalinfo_gender'),
    ]

    operations = [
        migrations.CreateModel(
            name='TaskRecurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('every_x_days', 'Every X Days'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], max_length=16)),
                ('interval_days', models.PositiveIntegerField(blank=True, help_text='Used only when frequency=every_x_days (>=1).', null=True)),
                ('by_weekday', models.JSONField(blank=True, default=list, help_text='Used only when frequency=weekly. Integers 0=Mon .. 6=Sun.')),
                ('day_of_month', models.PositiveSmallIntegerField(blank=True, help_text='Used only when frequency=monthly. 1..28 recommended.', null=True)),
                ('run_time_local', models.TimeField(default=datetime.time(8, 0), help_text='Time of day to run (Israel local time). Default 08:00.')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_run_at', models.DateTimeField(blank=True, null=True)),
                ('next_run_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('deduct_coins_on_create', models.BooleanField(default=True, help_text='Charge mentor when an instance is created.')),
                ('require_sufficient_balance', models.BooleanField(default=True, help_text='Skip creation if not enough TeenCoins.')),
                ('max_instances_per_period', models.PositiveSmallIntegerField(blank=True, help_text='Safety valve; typically leave empty.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('task', models.OneToOneField(help_text='Attach to a Task used as a template to clone from.', on_delete=django.db.models.deletion.CASCADE, related_name='recurrence', to='teenApp.task')),
            ],
            options={
                'verbose_name': 'Task Recurrence',
                'verbose_name_plural': 'Task Recurrences',
            },
        ),
        migrations.CreateModel(
            name='RecurringRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_start', models.DateField(db_index=True)),
                ('status', models.CharField(choices=[('created', 'created'), ('skipped', 'skipped'), ('error', 'error')], max_length=16)),
                ('reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('task_template', models.ForeignKey(help_text='Template task that produced (or attempted to produce) an instance.', on_delete=django.db.models.deletion.CASCADE, related_name='recurring_runs', to='teenApp.task')),
            ],
            options={
                'indexes': [models.Index(fields=['task_template', '-created_at'], name='teenApp_rec_task_te_f6aec0_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='recurringrun',
            constraint=models.UniqueConstraint(fields=('task_template', 'period_start'), name='uq_recurring_run_template_period'),
        ),
        migrations.AddIndex(
            model_name='taskrecurrence',
            index=models.Index(fields=['is_active', 'next_run_at'], name='teenApp_tas_is_acti_5ddf10_idx'),
        ),
        migrations.AddConstraint(
            model_name='taskrecurrence',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('frequency', 'every_x_days'), ('interval_days__gte', 1)), models.Q(('frequency', 'every_x_days'), _negated=True), _connector='OR'), name='rec_every_x_requires_interval'),
        ),
        migrations.AddConstraint(
            model_name='taskrecurrence',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('day_of_month__gte', 1), ('day_of_month__lte', 28), ('frequency', 'monthly')), models.Q(('frequency', 'monthly'), _negated=True), _connector='OR'), name='rec_monthly_dom_range'),
        ),
    ]
